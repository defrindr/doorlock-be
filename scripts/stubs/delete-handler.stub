import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';

import { BaseHandler } from '@src/shared/core/handlers/base.handler';
import { OkResponse } from '@src/shared/core/handlers/response.handler';
import { ApiResponseDto } from '@src/shared/core/responses/api-response.dto';

import { NotFoundHttpException } from '@src/shared/core/exceptions/exception';
import { {{SINGULAR_PASCAL}} } from '../../entities/{{SINGULAR_KEBAB}}.entity';
import { Delete{{SINGULAR_PASCAL}}Command } from '../imp/delete-{{SINGULAR_KEBAB}}.command';

@CommandHandler(Delete{{SINGULAR_PASCAL}}Command)
export class Delete{{SINGULAR_PASCAL}}Handler
  extends BaseHandler<Delete{{SINGULAR_PASCAL}}Command, ApiResponseDto<null>>
  implements ICommandHandler<Delete{{SINGULAR_PASCAL}}Command, ApiResponseDto<null>>
{
  constructor(
    @InjectRepository({{SINGULAR_PASCAL}})
    private readonly {{SINGULAR_CAMEL}}Repository: Repository<{{SINGULAR_PASCAL}}>,
  ) {
    super();
  }

  async handle(command: Delete{{SINGULAR_PASCAL}}Command): Promise<ApiResponseDto<null>> {
    const { id } = command;

    const {{SINGULAR_CAMEL}} = await this.{{SINGULAR_CAMEL}}Repository.findOne({
      where: { id },
    });

    if (!{{SINGULAR_CAMEL}}) {
      throw new NotFoundHttpException('{{SINGULAR_PASCAL}} not found');
    }

    await this.{{SINGULAR_CAMEL}}Repository.softDelete(id);

    return OkResponse(
      null,
      '{{SINGULAR_PASCAL}} deleted successfully',
    );
  }
}